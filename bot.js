import 'dotenv/config';
import express from 'express';
import { Telegraf, Markup } from 'telegraf';
import cron from 'node-cron';
import Database from 'better-sqlite3';

const app = express();

const TOKEN = process.env.BOT_TOKEN;
const PORT = process.env.PORT || 3000;

// ‚öΩ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤
const FORMATS = {
    '6x6': 12,
    '7x7': 14,
    '8x8': 16,
    '9x9': 18,
};

// üìù –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function formatPlayerMention(member) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å first_name (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (member.first_name) {
        const fullName = `${ member.first_name }${ member.last_name ? ` ${ member.last_name }` : '' }`;

        if (member.username) {
            return `[@${ member.username }](tg://user?id=${ member.id })`;
        } else {
            return `[${ fullName }](tg://user?id=${ member.id })`;
        }
    } else {
        // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - —Ç–æ–ª—å–∫–æ username
        return member.username ? `@${ member.username }` : `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ member.id }`;
    }
}

// üìù –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
function formatPlayersList(players, maxDisplay = 100) {
    if (!players || players.length === 0) {
        return '–Ω–µ—Ç';
    }

    const displayPlayers = players.slice(0, maxDisplay);
    const remaining = players.length - maxDisplay;

    let result = '';

    // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –±–æ–ª—å—à–µ 3, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    if (displayPlayers.length <= 3) {
        result = displayPlayers.map(formatPlayerMention).join(', ');
    } else {
        // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π, –ø–æ 2-3 –≤ —Å—Ç—Ä–æ–∫–µ
        const lines = [];
        for (let i = 0; i < displayPlayers.length; i += 3) {
            const line = displayPlayers.slice(i, i + 3)
                .map((player, idx) => `${i + idx + 1}. ${formatPlayerMention(player)}`)
                .join('  ');
            lines.push(line);
        }
        result = lines.join('\n');
    }

    if (remaining > 0) {
        result += `\n...–∏ –µ—â—ë ${remaining} ${getPlayerWord(remaining)}`;
    }

    return result;
}

// üìù –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–∏–≥—Ä–æ–∫"
function getPlayerWord(count) {
    if (count % 10 === 1 && count % 100 !== 11) {
        return '–∏–≥—Ä–æ–∫';
    }
    if (count % 10 >= 2 && count % 10 <= 4 && (count % 100 < 10 || count % 100 >= 20)) {
        return '–∏–≥—Ä–æ–∫–∞';
    }
    return '–∏–≥—Ä–æ–∫–æ–≤';
}

// üìù –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
function validateDate(dateStr) {
    if (!dateStr) return null;
    const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
    if (!dateRegex.test(dateStr)) return null;

    const date = new Date(dateStr + 'T00:00:00');
    if (isNaN(date.getTime())) return null;

    const today = new Date();
    today.setHours(0, 0, 0, 0);

    if (date < today) return null; // –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º

    return dateStr;
}

// üìù –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
function validateTime(timeStr) {
    if (!timeStr) return null;
    const timeRegex = /^\d{2}:\d{2}$/;
    if (!timeRegex.test(timeStr)) return null;

    const [hours, minutes] = timeStr.split(':').map(Number);
    if (hours < 0 || hours > 23 || minutes < 0 || minutes > 59) return null;

    return timeStr;
}

// üìù –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
function formatDateTime(date, time) {
    if (!date && !time) return '';

    let result = '';
    if (date) {
        const dateObj = new Date(date);
        const options = { weekday: 'short', month: 'short', day: 'numeric' };
        result += dateObj.toLocaleDateString('ru-RU', options);
    }
    if (time) {
        if (result) result += ' –≤ ';
        result += time;
    }
    return result;
}

// üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ SQLite
const db = new Database('bot.db');

// –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
db.prepare(
    `CREATE TABLE IF NOT EXISTS members
        (
            id
            TEXT
            PRIMARY
            KEY,
            username
            TEXT,
            first_name
            TEXT,
            last_name
            TEXT
        )`,
).run();

db.prepare(
    `CREATE TABLE IF NOT EXISTS sessions
     (
         id
         INTEGER
         PRIMARY
         KEY
         AUTOINCREMENT,
         chat_id
         INTEGER,
         format
         TEXT,
         needed_players
         INTEGER,
         is_active
         INTEGER,
         date
         TEXT,
         time
         TEXT
     )`,
).run();

// –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
const migrateTable = (tableName, columnName, columnType) => {
    try {
        const columns = db.prepare(`PRAGMA table_info(${tableName})`).all();
        const columnExists = columns.some(col => col.name === columnName);

        if (!columnExists) {
            db.prepare(`ALTER TABLE ${tableName} ADD COLUMN ${columnName} ${columnType}`).run();
            console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü ${columnName} –≤ —Ç–∞–±–ª–∏—Ü—É ${tableName}`);
        }
    } catch (e) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ ${columnName}:`, e.message);
    }
};

// –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
migrateTable('sessions', 'author_id', 'TEXT');
migrateTable('members', 'username', 'TEXT');
migrateTable('members', 'first_name', 'TEXT');
migrateTable('members', 'last_name', 'TEXT');
migrateTable('sessions', 'date', 'TEXT');
migrateTable('sessions', 'time', 'TEXT');
migrateTable('sessions', 'message_id', 'INTEGER');

db.prepare(
    `CREATE TABLE IF NOT EXISTS votes
    (
        user_id
        TEXT,
        vote
        TEXT,
        session_id
        INTEGER,
        PRIMARY
        KEY
     (
        user_id,
        session_id
     )
        )`,
).run();

db.prepare(
    `CREATE TABLE IF NOT EXISTS draft_sessions
    (
        chat_id
        INTEGER
        PRIMARY
        KEY,
        format
        TEXT,
        date
        TEXT,
        time
        TEXT,
        created_at
        DATETIME
        DEFAULT
        CURRENT_TIMESTAMP
    )`,
).run();

const bot = new Telegraf(TOKEN);

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ —Å –≥–æ—Ç–æ–≤—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
bot.telegram.setMyCommands([
    {command: 'start_vote', description: '–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –∏–≥—Ä—ã: /start_vote 6x6|7x7|8x8|9x9'},
    {command: 'set_time', description: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è: /set_time YYYY-MM-DD HH:MM'},
    {command: 'confirm_vote', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ'},
    {command: 'cancel_setup', description: '–û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è'},
    {command: 'set_datetime', description: '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è: /set_datetime YYYY-MM-DD HH:MM'},
    {command: 'end_vote', description: '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ'},
]);

// –•–µ–ª–ø–µ—Ä —Å—Ç–∞—Ä—Ç–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è c –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
async function startVoteWithFormat(ctx, fmt, date = null, time = null) {
    if (!fmt || !FORMATS[fmt]) {
        return ctx.reply('‚ö†Ô∏è –£–∫–∞–∂–∏ —Ñ–æ—Ä–º–∞—Ç: /start_vote 6x6 | 7x7 | 8x8 | 9x9 [–¥–∞—Ç–∞ YYYY-MM-DD] [–≤—Ä–µ–º—è HH:MM]');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    const validDate = validateDate(date);
    const validTime = validateTime(time);

    if (date && !validDate) {
        return ctx.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-09-22)');
    }
    if (time && !validTime) {
        return ctx.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 19:00)');
    }

    try {
        const member = await ctx.telegram.getChatMember(ctx.chat.id, ctx.from.id);
        const isAdmin = member.status === 'administrator' || member.status === 'creator';
        if (!isAdmin) {
            return ctx.reply('üö´ –ó–∞–ø—É—Å–∫–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.');
        }
    } catch (err) {
        return ctx.reply('üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    const existingActive = db
    .prepare(`SELECT id, format, needed_players, date, time
              FROM sessions
              WHERE chat_id = ?
                AND is_active = 1`)
    .get(ctx.chat.id);
    if (existingActive) {
        const dateTimeInfo = formatDateTime(existingActive.date, existingActive.time);
        const dateTimeText = dateTimeInfo ? `\nüóìÔ∏è ${dateTimeInfo}` : '';
        return ctx.reply(
            `‚ö†Ô∏è –í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ (—Ñ–æ—Ä–º–∞—Ç: ${ existingActive.format }).${dateTimeText}\n` +
            `–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∫–æ–º–∞–Ω–¥–æ–π /end_vote.`,
        );
    }
    const info = db
    .prepare(
        `INSERT INTO sessions (chat_id, format, needed_players, is_active, author_id, date, time)
         VALUES (?, ?, ?, 1, ?, ?, ?)`,
    )
    .run(ctx.chat.id, fmt, FORMATS[fmt], ctx.from.id.toString(), validDate, validTime);
    const sessionId = info.lastInsertRowid;

    const dateTimeInfo = formatDateTime(validDate, validTime);
    const dateTimeText = dateTimeInfo ? `\nüóìÔ∏è ${dateTimeInfo}` : '';

    const message = await ctx.reply(
        `‚öΩ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!\n–§–æ—Ä–º–∞—Ç: ${ fmt } (–Ω—É–∂–Ω–æ ${ FORMATS[fmt] } –∏–≥—Ä–æ–∫–æ–≤)${dateTimeText}\n\n–ö—Ç–æ –∏–≥—Ä–∞–µ—Ç?`,
        Markup.inlineKeyboard([
            [Markup.button.callback('‚úÖ –ò–≥—Ä–∞—é', `vote:yes:${ sessionId }`)],
            [Markup.button.callback('‚ùå –ù–µ –∏–≥—Ä–∞—é', `vote:no:${ sessionId }`)],
            [Markup.button.callback('ü§î –ù–µ –∑–Ω–∞—é', `vote:maybe:${ sessionId }`)],
        ]),
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    db.prepare(`UPDATE sessions SET message_id = ? WHERE id = ?`).run(message.message_id, sessionId);
}

// üìå –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ë–î
bot.on('new_chat_members', (ctx) => {
    ctx.message.new_chat_members.forEach((member) => {
        const id = member.id.toString();
        const username = member.username;
        const firstName = member.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        const lastName = member.last_name || '';
        db.prepare(
            `INSERT
            OR REPLACE INTO members (id, username, first_name, last_name) VALUES (?, ?, ?, ?)`,
        ).run(id, username, firstName, lastName);
    });
});

// üìå –£–¥–∞–ª—è–µ–º —Ç–µ—Ö, –∫—Ç–æ –≤—ã—à–µ–ª
bot.on('left_chat_member', (ctx) => {
    const member = ctx.message.left_chat_member;
    db.prepare(`DELETE
                FROM members
                WHERE id = ?`).run(member.id.toString());
});

// üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞—Ç–æ–π/–≤—Ä–µ–º–µ–Ω–µ–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
bot.use(async (ctx, next) => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!ctx.message || !ctx.message.text) {
        return next();
    }

    const text = ctx.message.text.trim();

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /)
    if (text.startsWith('/')) {
        return next();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    const draft = db
    .prepare(`SELECT * FROM draft_sessions WHERE chat_id = ?`)
    .get(ctx.chat.id);

    if (!draft) {
        return next(); // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    const parts = text.split(' ');
    if (parts.length === 2) {
        const date = parts[0];
        const time = parts[1];

        const validDate = validateDate(date);
        const validTime = validateTime(time);

        if (validDate && validTime) {
            try {
                const member = await ctx.telegram.getChatMember(ctx.chat.id, ctx.from.id);
                const isAdmin = member.status === 'administrator' || member.status === 'creator';

                if (isAdmin) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–µ
                    db.prepare(`UPDATE draft_sessions SET date = ?, time = ? WHERE chat_id = ?`)
                    .run(validDate, validTime, ctx.chat.id);

                    const dateTimeInfo = formatDateTime(validDate, validTime);
                    await ctx.reply(
                        `‚úÖ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${dateTimeInfo}\n\n` +
                        `üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n` +
                        `‚öΩ –§–æ—Ä–º–∞—Ç: ${draft.format} (–Ω—É–∂–Ω–æ ${FORMATS[draft.format]} –∏–≥—Ä–æ–∫–æ–≤)\n` +
                        `üóìÔ∏è ${dateTimeInfo}\n\n` +
                        `üöÄ –ó–∞–ø—É—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ:\n` +
                        `/confirm_vote`
                    );
                    return; // –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                }
            } catch (err) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
            }
        }
    }

    return next(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
});

// üèÅ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–≥—Ä—ã
bot.command('start_vote', async (ctx) => {
    const args = ctx.message.text.split(' ');
    const fmt = args[1];

    if (!fmt || !FORMATS[fmt]) {
        return ctx.reply('‚ö†Ô∏è –£–∫–∞–∂–∏ —Ñ–æ—Ä–º–∞—Ç: /start_vote 6x6 | 7x7 | 8x8 | 9x9\n\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ:\n/set_time YYYY-MM-DD HH:MM\n/confirm_vote');
    }

    try {
        const member = await ctx.telegram.getChatMember(ctx.chat.id, ctx.from.id);
        const isAdmin = member.status === 'administrator' || member.status === 'creator';
        if (!isAdmin) {
            return ctx.reply('üö´ –ó–∞–ø—É—Å–∫–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.');
        }
    } catch (err) {
        return ctx.reply('üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤ —á–µ—Ä–Ω–æ–≤–∏–∫
    db.prepare(
        `INSERT OR REPLACE INTO draft_sessions (chat_id, format)
         VALUES (?, ?)`,
    ).run(ctx.chat.id, fmt);

    await ctx.reply(
        `‚öΩ –§–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω: ${fmt} (–Ω—É–∂–Ω–æ ${FORMATS[fmt]} –∏–≥—Ä–æ–∫–æ–≤)\n\n` +
        `üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏ –≤—Ä–µ–º—è:\n` +
        `‚Ä¢ –ö–æ–º–∞–Ω–¥–æ–π: /set_time YYYY-MM-DD HH:MM\n` +
        `‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏: 2025-09-22 19:00\n\n` +
        `‚úÖ –ó–∞–ø—É—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ:\n` +
        `/confirm_vote`
    );
});

// –ê–ª–∏–∞—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
bot.command('start_6x6', async (ctx) => {
    const args = ctx.message.text.split(' ');
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
    if (args[1]) {
        const date = args[1];
        const time = args[2];
        await startVoteWithFormat(ctx, '6x6', date, time);
    } else {
        // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        ctx.message.text = '/start_vote 6x6';
        await bot.handleUpdate({ message: ctx.message });
    }
});
bot.command('start_7x7', async (ctx) => {
    const args = ctx.message.text.split(' ');
    if (args[1]) {
        const date = args[1];
        const time = args[2];
        await startVoteWithFormat(ctx, '7x7', date, time);
    } else {
        ctx.message.text = '/start_vote 7x7';
        await bot.handleUpdate({ message: ctx.message });
    }
});
bot.command('start_8x8', async (ctx) => {
    const args = ctx.message.text.split(' ');
    if (args[1]) {
        const date = args[1];
        const time = args[2];
        await startVoteWithFormat(ctx, '8x8', date, time);
    } else {
        ctx.message.text = '/start_vote 8x8';
        await bot.handleUpdate({ message: ctx.message });
    }
});
bot.command('start_9x9', async (ctx) => {
    const args = ctx.message.text.split(' ');
    if (args[1]) {
        const date = args[1];
        const time = args[2];
        await startVoteWithFormat(ctx, '9x9', date, time);
    } else {
        ctx.message.text = '/start_vote 9x9';
        await bot.handleUpdate({ message: ctx.message });
    }
});

// üéõ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
bot.on('callback_query', async (ctx) => {
    const [action, vote, sessionId] = ctx.callbackQuery.data.split(':');
    
    if (action !== 'vote') return;
    
    const activeSession = db
    .prepare(`SELECT *, date, time
              FROM sessions
              WHERE id = ?
                AND is_active = 1`)
    .get(sessionId);

    if (!activeSession) {
        return ctx.answerCbQuery('‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ');
    }
    
    const userId = ctx.from.id.toString();
    const username = ctx.from.username;
    const firstName = ctx.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    const lastName = ctx.from.last_name || '';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –≥–æ–ª–æ—Å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º
    const existing = db
    .prepare(`SELECT vote
              FROM votes
              WHERE user_id = ?
                AND session_id = ?`)
    .get(userId, sessionId);

    if (existing && existing.vote === vote) {
        await ctx.answerCbQuery('–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: –≤–∞—à –≥–æ–ª–æ—Å —É–∂–µ —É—á—Ç—ë–Ω.');
        return;
    }

    db.prepare(
        `INSERT
        OR REPLACE INTO members (id, username, first_name, last_name) VALUES (?, ?, ?, ?)`,
    ).run(userId, username, firstName, lastName);
    
    db.prepare(
        `INSERT
        OR REPLACE INTO votes (user_id, vote, session_id) VALUES (?, ?, ?)`,
    ).run(userId, vote, sessionId);
    
    // –°—á–∏—Ç–∞–µ–º –≥–æ–ª–æ—Å–∞
    const votes = db
    .prepare(`SELECT vote, COUNT(*) as count
              FROM votes
              WHERE session_id = ?
              GROUP BY vote`)
    .all(sessionId);
    
    const yes = db
    .prepare(`SELECT m.id, m.username, m.first_name, m.last_name
              FROM votes v
                        JOIN members m ON v.user_id = m.id
              WHERE v.vote = 'yes'
                AND v.session_id = ?`)
    .all(sessionId);

    const no = db
    .prepare(`SELECT m.id, m.username, m.first_name, m.last_name
              FROM votes v
                        JOIN members m ON v.user_id = m.id
              WHERE v.vote = 'no'
                AND v.session_id = ?`)
    .all(sessionId);

    const maybe = db
    .prepare(`SELECT m.id, m.username, m.first_name, m.last_name
              FROM votes v
                        JOIN members m ON v.user_id = m.id
              WHERE v.vote = 'maybe'
                AND v.session_id = ?`)
    .all(sessionId);
    
    const totalYes = yes.length;
    
    const dateTimeInfo = formatDateTime(activeSession.date, activeSession.time);
    const dateTimeText = dateTimeInfo ? `\nüóìÔ∏è ${dateTimeInfo}` : '';

    try {
        await ctx.editMessageText(
            `‚öΩ –§–æ—Ä–º–∞—Ç: ${ activeSession.format }${dateTimeText}\n` +
            `‚úÖ –ò–≥—Ä–∞—é—Ç: ${ formatPlayersList(yes) }\n` +
            `‚ùå –ù–µ –∏–≥—Ä–∞—é—Ç: ${ formatPlayersList(no) }\n` +
            `ü§î –î—É–º–∞—é—Ç: ${ formatPlayersList(maybe) }\n\n` +
            `–ò–≥—Ä–æ–∫–æ–≤ –Ω—É–∂–Ω–æ: ${ activeSession.needed_players }, —É–∂–µ –µ—Å—Ç—å: ${ totalYes }`,
            {
                parse_mode: 'Markdown',
                ...Markup.inlineKeyboard([
                    [Markup.button.callback('‚úÖ –ò–≥—Ä–∞—é', `vote:yes:${ sessionId }`)],
                    [Markup.button.callback('ü§î –ù–µ –∑–Ω–∞—é', `vote:maybe:${ sessionId }`)],
                    [Markup.button.callback('‚ùå –ù–µ –∏–≥—Ä–∞—é', `vote:no:${ sessionId }`)],
                ])
            }
        );
    } catch (err) {
        const desc = err?.response?.description || err?.description || err?.message || '';
        if (!desc.includes('message is not modified')) {
            console.error('editMessageText failed:', err);
        }
    }
    
    if (totalYes >= activeSession.needed_players) {
        db.prepare(`UPDATE sessions
                    SET is_active = 0
                    WHERE id = ?`).run(sessionId);
        await ctx.reply(
            `üéâ –ù–∞–±—Ä–∞–ª–æ—Å—å ${ activeSession.needed_players } –∏–≥—Ä–æ–∫–æ–≤! –ú–∞—Ç—á —Å–æ—Å—Ç–æ–∏—Ç—Å—è! –°–±–æ—Ä –∑–∞–∫—Ä—ã—Ç ‚úÖ`,
        );
    }
    
    await ctx.answerCbQuery('–ì–æ–ª–æ—Å —É—á—Ç–µ–Ω!');
});

// üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
bot.command('end_vote', async (ctx) => {
    const active = db
    .prepare(`SELECT id, author_id
              FROM sessions
              WHERE chat_id = ?
                AND is_active = 1`)
    .get(ctx.chat.id);
    
    if (!active) {
        return ctx.reply('‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –Ω–µ—Ç. –ó–∞–ø—É—Å—Ç–∏—Ç—å: /start_vote 6x6 | 7x7 | 8x8 | 9x9');
    }
    
    let isAdmin = false;
    try {
        const member = await ctx.telegram.getChatMember(ctx.chat.id, ctx.from.id);
        isAdmin = member.status === 'administrator' || member.status === 'creator';
    } catch (err) {
        // –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ –∞–¥–º–∏–Ω
        isAdmin = false;
    }
    
    const isAuthor = active.author_id && active.author_id === ctx.from.id.toString();
    if (!isAdmin && !isAuthor) {
        return ctx.reply('üö´ –ó–∞–≤–µ—Ä—à–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–ª–∏ –∞–≤—Ç–æ—Ä –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.');
    }
    
    db.prepare(`UPDATE sessions
                SET is_active = 0
                WHERE id = ?`).run(active.id);

    // –û—á–∏—â–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    db.prepare(`DELETE FROM draft_sessions WHERE chat_id = ?`).run(ctx.chat.id);

    await ctx.reply('‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–µ: /start_vote 6x6 | 7x7 | 8x8 | 9x9');
});

// üïê –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
bot.command('set_time', async (ctx) => {
    const args = ctx.message.text.split(' ');
    const date = args[1];
    const time = args[2];

    if (!date || !time) {
        return ctx.reply('‚ö†Ô∏è –£–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è: /set_time YYYY-MM-DD HH:MM\n–ü—Ä–∏–º–µ—Ä: /set_time 2025-09-22 19:00');
    }

    const validDate = validateDate(date);
    const validTime = validateTime(time);

    if (!validDate) {
        return ctx.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-09-22)');
    }
    if (!validTime) {
        return ctx.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 19:00)');
    }

    try {
        const member = await ctx.telegram.getChatMember(ctx.chat.id, ctx.from.id);
        const isAdmin = member.status === 'administrator' || member.status === 'creator';
        if (!isAdmin) {
            return ctx.reply('üö´ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.');
        }
    } catch (err) {
        return ctx.reply('üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    const draft = db
    .prepare(`SELECT * FROM draft_sessions WHERE chat_id = ?`)
    .get(ctx.chat.id);

    if (!draft) {
        return ctx.reply('‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–æ–π /start_vote 6x6|7x7|8x8|9x9');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–µ
    db.prepare(`UPDATE draft_sessions SET date = ?, time = ? WHERE chat_id = ?`)
    .run(validDate, validTime, ctx.chat.id);

    const dateTimeInfo = formatDateTime(validDate, validTime);
    await ctx.reply(
        `‚úÖ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${dateTimeInfo}\n\n` +
        `üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n` +
        `‚öΩ –§–æ—Ä–º–∞—Ç: ${draft.format} (–Ω—É–∂–Ω–æ ${FORMATS[draft.format]} –∏–≥—Ä–æ–∫–æ–≤)\n` +
        `üóìÔ∏è ${dateTimeInfo}\n\n` +
        `üöÄ –ó–∞–ø—É—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ:\n` +
        `/confirm_vote`
    );
});

// üö´ –û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
bot.command('cancel_setup', async (ctx) => {
    try {
        const member = await ctx.telegram.getChatMember(ctx.chat.id, ctx.from.id);
        const isAdmin = member.status === 'administrator' || member.status === 'creator';
        if (!isAdmin) {
            return ctx.reply('üö´ –£–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.');
        }
    } catch (err) {
        return ctx.reply('üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    const deleted = db.prepare(`DELETE FROM draft_sessions WHERE chat_id = ?`).run(ctx.chat.id);
    if (deleted.changes > 0) {
        await ctx.reply('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start_vote');
    } else {
        await ctx.reply('‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.');
    }
});

// ‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
bot.command('confirm_vote', async (ctx) => {
    try {
        const member = await ctx.telegram.getChatMember(ctx.chat.id, ctx.from.id);
        const isAdmin = member.status === 'administrator' || member.status === 'creator';
        if (!isAdmin) {
            return ctx.reply('üö´ –ó–∞–ø—É—Å–∫–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.');
        }
    } catch (err) {
        return ctx.reply('üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    const existingActive = db
    .prepare(`SELECT id, format, needed_players, date, time
              FROM sessions
              WHERE chat_id = ?
                AND is_active = 1`)
    .get(ctx.chat.id);
    if (existingActive) {
        const dateTimeInfo = formatDateTime(existingActive.date, existingActive.time);
        const dateTimeText = dateTimeInfo ? `\nüóìÔ∏è ${dateTimeInfo}` : '';
        return ctx.reply(
            `‚ö†Ô∏è –í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ (—Ñ–æ—Ä–º–∞—Ç: ${ existingActive.format }).${dateTimeText}\n` +
            `–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∫–æ–º–∞–Ω–¥–æ–π /end_vote.`,
        );
    }

    // –ü–æ–ª—É—á–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
    const draft = db
    .prepare(`SELECT * FROM draft_sessions WHERE chat_id = ?`)
    .get(ctx.chat.id);

    if (!draft || !draft.format) {
        return ctx.reply('‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–æ–π /start_vote 6x6|7x7|8x8|9x9');
    }

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    const info = db
    .prepare(
        `INSERT INTO sessions (chat_id, format, needed_players, is_active, author_id, date, time)
         VALUES (?, ?, ?, 1, ?, ?, ?)`,
    )
    .run(ctx.chat.id, draft.format, FORMATS[draft.format], ctx.from.id.toString(), draft.date, draft.time);
    const sessionId = info.lastInsertRowid;

    // –û—á–∏—â–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
    db.prepare(`DELETE FROM draft_sessions WHERE chat_id = ?`).run(ctx.chat.id);

    const dateTimeInfo = formatDateTime(draft.date, draft.time);
    const dateTimeText = dateTimeInfo ? `\nüóìÔ∏è ${dateTimeInfo}` : '';

    const message = await ctx.reply(
        `‚öΩ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!\n–§–æ—Ä–º–∞—Ç: ${draft.format} (–Ω—É–∂–Ω–æ ${FORMATS[draft.format]} –∏–≥—Ä–æ–∫–æ–≤)${dateTimeText}\n\n–ö—Ç–æ –∏–≥—Ä–∞–µ—Ç?`,
        Markup.inlineKeyboard([
            [Markup.button.callback('‚úÖ –ò–≥—Ä–∞—é', `vote:yes:${ sessionId }`)],
            [Markup.button.callback('‚ùå –ù–µ –∏–≥—Ä–∞—é', `vote:no:${ sessionId }`)],
            [Markup.button.callback('ü§î –ù–µ –∑–Ω–∞—é', `vote:maybe:${ sessionId }`)],
        ]),
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    db.prepare(`UPDATE sessions SET message_id = ? WHERE id = ?`).run(message.message_id, sessionId);
});

// üïê –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
bot.command('set_datetime', async (ctx) => {
    const args = ctx.message.text.split(' ');
    const date = args[1];
    const time = args[2];

    if (!date && !time) {
        return ctx.reply('‚ö†Ô∏è –£–∫–∞–∂–∏ –¥–∞—Ç—É –∏/–∏–ª–∏ –≤—Ä–µ–º—è: /set_datetime YYYY-MM-DD HH:MM\n–ü—Ä–∏–º–µ—Ä: /set_datetime 2025-09-22 19:00');
    }

    const validDate = validateDate(date);
    const validTime = validateTime(time);

    if (date && !validDate) {
        return ctx.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-09-22)');
    }
    if (time && !validTime) {
        return ctx.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 19:00)');
    }

    try {
        const member = await ctx.telegram.getChatMember(ctx.chat.id, ctx.from.id);
        const isAdmin = member.status === 'administrator' || member.status === 'creator';
        if (!isAdmin) {
            return ctx.reply('üö´ –ò–∑–º–µ–Ω—è—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.');
        }
    } catch (err) {
        return ctx.reply('üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    const activeSession = db
    .prepare(`SELECT id, format, date, time
              FROM sessions
              WHERE chat_id = ?
                AND is_active = 1`)
    .get(ctx.chat.id);

    if (!activeSession) {
        return ctx.reply('‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –Ω–µ—Ç. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /start_vote');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    db.prepare(`UPDATE sessions SET date = ?, time = ? WHERE id = ?`)
    .run(validDate || activeSession.date, validTime || activeSession.time, activeSession.id);

    const newDateTimeInfo = formatDateTime(validDate || activeSession.date, validTime || activeSession.time);
    const dateTimeText = newDateTimeInfo ? `\nüóìÔ∏è ${newDateTimeInfo}` : '';

    await ctx.reply(`‚úÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!${dateTimeText}`);
});

// üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
cron.schedule('0 */2 * * *', async () => {
    const activeSessions = db
    .prepare(`SELECT id, chat_id, message_id
              FROM sessions
              WHERE is_active = 1`)
    .all();

    if (!activeSessions || activeSessions.length === 0) {
        return;
    }

    for (const session of activeSessions) {
        const votedUserIds = db
        .prepare(`SELECT user_id
                  FROM votes
                  WHERE session_id = ?`)
        .all(session.id)
        .map((r) => r.user_id);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        let membersQuery = `SELECT id`;
        try {
            db.prepare(`SELECT first_name FROM members LIMIT 1`).get();
            membersQuery += `, username, first_name, last_name`;
        } catch (e) {
            // –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
            membersQuery += `, username`;
        }
        membersQuery += ` FROM members`;

        const members = db.prepare(membersQuery).all();

        const notVotedMembers = members.filter((m) => !votedUserIds.includes(m.id));
        const mentions = notVotedMembers
        .map(formatPlayerMention)
        .filter((s) => s.length > 0)
        .join(', ');

        if (mentions.length > 0) {
            // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
            let voteLink = '';
            if (session.message_id) {
                const chatId = session.chat_id.toString().replace('-', ''); // –£–±–∏—Ä–∞–µ–º –º–∏–Ω—É—Å –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø
                voteLink = ` [–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ](https://t.me/c/${chatId}/${session.message_id})`;
            }

            await bot.telegram.sendMessage(
                session.chat_id,
                `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ü—Ä–æ–≥–æ–ª–æ—Å—É–π—Ç–µ, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å.${voteLink}\n` +
                mentions,
                { parse_mode: 'Markdown' }
            );
        }
    }
});

// üöÄ Express healthcheck
app.get('/', (req, res) => {
    res.send('Telegram bot with SQLite is running...');
});

app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${ PORT }`);
});

console.log('üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');

// ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API...');
bot.launch().then(() => {
    console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram!');
}).catch((err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err.message);
    console.error('–ü—Ä–æ–≤–µ—Ä—å BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    process.exit(1);
});
